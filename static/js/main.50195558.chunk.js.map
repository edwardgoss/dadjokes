{"version":3,"sources":["Joke.js","JokeList.js","App.js","serviceWorker.js","index.js"],"names":["Joke","this","props","votes","className","onClick","upvote","style","borderColor","getColor","downvote","text","class","getEmoji","Component","JokeList","state","jokes","JSON","parse","window","localStorage","getItem","loading","handleClick","setState","getJokes","seenJokes","Set","map","j","length","numJokesToGet","axios","get","headers","Accept","res","newJoke","data","joke","has","console","log","push","id","uuid","st","setItem","stringify","alert","delta","sort","a","b","alt","src","key","handleVote","defaultProps","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.50195558.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Joke.css\";\n\nexport default class Joke extends Component {\n  getColor() {\n    if (this.props.votes >= 15) {\n      return \"#4CAF50\";\n    } else if (this.props.votes >= 12) {\n      return \"#8BC34A\";\n    } else if (this.props.votes >= 9) {\n      return \"#CDDC39\";\n    } else if (this.props.votes >= 6) {\n      return \"#FFEB3B\";\n    } else if (this.props.votes >= 3) {\n      return \"#FFC107\";\n    } else if (this.props.votes >= 0) {\n      return \"#FF9800\";\n    } else {\n      return \"#f44336\";\n    }\n  }\n  getEmoji() {\n    if (this.props.votes >= 15) {\n      return \"em em-rolling_on_the_floor_laughing\";\n    } else if (this.props.votes >= 12) {\n      return \"em em-laughing\";\n    } else if (this.props.votes >= 9) {\n      return \"em em-smiley\";\n    } else if (this.props.votes >= 6) {\n      return \"em em-slightly_smiling_face\";\n    } else if (this.props.votes >= 3) {\n      return \"em em-neutral_face\";\n    } else if (this.props.votes >= 0) {\n      return \"em em-confused\";\n    } else {\n      return \"em em-angry\";\n    }\n  }\n  render() {\n    return (\n      <div className=\"Joke\">\n        <div className=\"Joke-buttons\">\n          <i className=\"fas fa-arrow-up\" onClick={this.props.upvote}></i>\n          <span className=\"Joke-votes\" style={{borderColor: this.getColor()}}>{this.props.votes}</span>\n          <i className=\"fas fa-arrow-down\" onClick={this.props.downvote}></i>\n        </div>\n        <div className=\"Joke-text\">{this.props.text}</div>\n        <div className=\"Joke-smiley\">\n        <i class={this.getEmoji()}></i>        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Joke from \"./Joke.js\";\nimport axios from \"axios\";\nimport uuid from \"uuid/v4\";\nimport \"./JokeList.css\";\n\nexport default class JokeList extends Component {\n  constructor(props) {\n    super(props);\n    this.seenJokes = new Set(this.state.jokes.map(j => j.text));\n  }\n  static defaultProps = {\n    numJokesToGet: 10\n  };\n  state = {\n    jokes: JSON.parse(window.localStorage.getItem(\"jokes\") || \"[]\"),\n    loading: false\n  };\n  componentDidMount() {\n    if (this.state.jokes.length === 0) this.getJokes();\n  }\n  async getJokes() {\n    try {\n      let jokes = [];\n      while (jokes.length < this.props.numJokesToGet) {\n        let res = await axios.get(\"https://icanhazdadjoke.com/\", {\n          headers: { Accept: \"application/json\" }\n        });\n        let newJoke = res.data.joke;\n        if (!this.seenJokes.has(newJoke)) {\n          jokes.push({ id: uuid(), text: newJoke, votes: 0 });\n        } else {\n          console.log(\"FOUND A DUPLICATE!\");\n          console.log(newJoke);\n        }\n      }\n      this.setState(\n        st => ({\n          jokes: [...st.jokes, ...jokes],\n          loading: false\n        }),\n        () =>\n          window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\n      );\n    } catch (e) {\n      alert(e);\n      this.setState({ loading: false });\n    }\n  }\n  handleVote(id, delta) {\n    this.setState(\n      st => ({\n        jokes: st.jokes.map(j =>\n          j.id === id ? { ...j, votes: j.votes + delta } : j\n        )\n      }),\n      () =>\n        window.localStorage.setItem(\"jokes\", JSON.stringify(this.state.jokes))\n    );\n  }\n  handleClick = () => {\n    this.setState({ loading: true }, this.getJokes);\n  };\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"JokeList-spinner\">\n          <i className=\"far fa-8x fa-laugh fa-spin\" />\n          <h1 className=\"JokeList-title\">Loading...</h1>\n        </div>\n      );\n    }\n    let jokes = this.state.jokes.sort((a, b) => b.votes - a.votes);\n    return (\n      <div className=\"JokeList\">\n        <div className=\"JokeList-sidebar\">\n          <h1 className=\"JokeList-title\">\n            <span>Dad</span> Jokes\n          </h1>\n          <img alt=\"\" src=\"https://assets.dryicons.com/uploads/icon/svg/8927/0eb14c71-38f2-433a-bfc8-23d9c99b3647.svg\" />\n          <button className=\"JokeList-getmore\" onClick={this.handleClick}>\n            New Jokes\n          </button>\n        </div>\n        <div className=\"JokeList-jokes\">\n          {jokes.map(j => (\n            <Joke\n              key={j.id}\n              votes={j.votes}\n              text={j.text}\n              downvote={() => this.handleVote(j.id, -1)}\n              upvote={() => this.handleVote(j.id, 1)}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport JokeList from './JokeList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <JokeList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}